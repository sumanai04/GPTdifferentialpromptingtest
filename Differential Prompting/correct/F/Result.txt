Waiting for Gemini...
AI: ```python
import sys

def solve_test_case():
    n, c, d = map(int, input().split())
    A = list(map(int, input().split()))
    A.sort(reverse=True)
    selecsum = sum(A[:d])
    if selecsum >= c:
        print("Infinity")
        return
    if sum(A) < c * d:
        print("Impossible")
        return
    l, r = 0, d
    while l <= r:
        mid = (l + r) // 2
        numselec, remain = divmod(mid + 1, d)
        selecsum = sum(A[:mid+1])
        coins = numselec * selecsum + sum(A[:remain])
        if coins >= c:
            l = mid
        else:
            r = mid - 1
        mid = (l + r) // 2
    print(mid)

if __name__ == "__main__":
    t = int(input())
    for _ in range(t):
        solve_test_case()
```
Waiting for Gemini...
AI: ```python
for _ in range(int(input())):
    n, c, d = map(int, input().split())
    A = sorted(map(int, input().split()), reverse=True)
    sumd = sum(A[:d])
    if sumd >= c:
        print("Infinity")
        continue
    elif sum(A) < c * d:
        print("Impossible")
        continue
    l, r = 0, d
    while l <= r:
        mid = (l + r) // 2
        selecsum = sum(A[:mid+1])
        numselec = mid+1
        remain = n - numselec * d
        coins = numselec * selecsum + sum(A[:remain])
        if coins >= c:
            l = mid + 1
        else:
            r = mid - 1
    print(l)
```
Reference versions generating end!
Test inputs generation 1:
Waiting for Gemini...
AI: Test input: 1
1 10 2
10 10
Test input: 1
1 100 3
100 100 100 100
Test input: 1
1 100 2
100 100
Test input: 1
1 1 5
1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9 9 10 10
Test input: 1
1 100 2
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50
Test inputs generation 2:
Waiting for Gemini...
AI: Test input: 2
Test input: 4 10 1
Test input: 3 100 2
Test input: 3 100 1
Test inputs generation 3:
Waiting for Gemini...
AI: Test input: 1
5 10 3
2 1 6 8 5
Test input: 1
6 20 5
1 2 3 4 5 6
Test input: 1
5 14 3
1 3 5 7 9
Test input: 1
6 30 5
1 2 3 4 5 6
Test input: 1
5 16 3
2 4 6 8 10
Test inputs generation 4:
Waiting for Gemini...
AI: Test input: 1
4 12 5
5 3 0 9
Test input: 2
3 1 2
10 2 6
Test input: 3
3 1 2
4 6 10
Test input: 4
3 3 2
3 3 10
Test input: 5
3 3 3
2 4 6
Test inputs generation 5:
Waiting for Gemini...
AI: Test input: 2
Test input: 3 4 2
4 2 1
Test input: 3 10 4
1 2 9
Test inputs generation 6:
Waiting for Gemini...
AI: Test input: 1
10 100 2
1 2 3 4 5 6 7 8 9 10
Test input: 1
10 100 4
1 2 3 4 5 6 7 8 9 10
Test input: 1
10 1 4
1 2 3 4 5 6 7 8 9 10
Test input: 1
10 50 2
1 2 3 4 5 6 7 8 9 10
Test inputs generation 7:
Waiting for Gemini...
AI: Test input: 1
4 10 3
2 3 4 5
Test input: 2
5 20 2
10 5 9 8 6
Test input: 3
4 20 3
3 4 5 6
Test input: 4
20 10 2
5 3 9 2 8 2 4 1 4 7 6 4 2 6 8 7 1 8 3 8
Test input: 5
10 30 3
3 2 4 9 7 8 6 9 1 2
Test inputs generation 8:
Waiting for Gemini...
AI: Test input: 2
Test input: 4 10 1
Test input: 1 6 1
Test inputs generation 9:
Waiting for Gemini...
AI: Test input:
5
100 100 50
10 11 12 13 14 15 16 17 18 19

Test input:
6
300 300 40
100 100 100

Test input:
5
100 30 40
10 20 30 40 50

Test input:
6
666 666 60
100 100 100

Test input:
4
30 30 30
9 9 9 9

Test input:
10
1000 1000 100
10 20 30 40 50 60 70 80 90 100
Test inputs generation 10:
Waiting for Gemini...
AI: Test input: 1
3 12 7
2 5 9
Test input: 1
3 12 4
7 1 1
Test input: 1
6 2 1
8 1 8 7 4 9
Test input: 1
5 13 3
5 6 3 1 1
Test input: 2
3 10 5
1 2 3
3 15 5
1 2 3
The result of test 1:
No failure-inducing test is found.
End!